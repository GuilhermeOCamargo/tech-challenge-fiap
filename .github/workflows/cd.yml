name: 'Pipeline'
on:
  push:
    branches:
      - 'develop'
      - 'release'
      - 'main'
env:
  BRANCH_NAME: ${{github.ref_name}}
  APP_NAME: tech-challenge-api

jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Create Docker Tag
        run: |
          if [[ ${{env.BRANCH_NAME}} == 'main' ]]
          then
            DOCKER_TAG="latest-${{ github.sha }}"
          else
            DOCKER_TAG="${{env.BRANCH_NAME}}-latest-${{ github.sha }}"
          fi
          echo "DOCKER_TAG=${DOCKER_TAG}" >> $GITHUB_ENV
      - name: Docker Tag
        run: echo ${{ env.DOCKER_TAG }}
      - run: docker build --tag ${{ env.APP_NAME }}:${{ env.DOCKER_TAG}} .
      - name: Push to ECR
        id: ecr
        uses: jwalton/gh-ecr-push@v1
        with:
          access-key-id: ${{ secrets.REGISTRY_USER }}
          secret-access-key: ${{ secrets.REGISTRY_KEY }}
          region: us-east-1
          image: ${{ env.APP_NAME }}:${{ env.DOCKER_TAG}}
  deploy:
    name: Deploy to Cluster
    runs-on: ubuntu-latest
    needs: build-image
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.REGISTRY_USER }}
        aws-secret-access-key: ${{ secrets.REGISTRY_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition "${{ secrets.ECS_TASK_DEFINITION }}" --query taskDefinition > task-definition.json

    - name: Render Amazon ECS task definition
      id: render-web-container
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ secrets.CONTAINER_NAME }}
        image: ${{ steps.login-ecr.outputs.registry }}/${{ env.APP_NAME }}:${{ env.DOCKER_TAG}}

    - name: Deploy to Amazon ECS service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.render-web-container.outputs.task-definition }}
        service: ${{ secrets.ECS_SERVICE }}
        cluster: ${{ secrets.ECS_CLUSTER }}
        wait-for-service-stability: true